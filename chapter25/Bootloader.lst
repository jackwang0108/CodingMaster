     1                                  section code vstart=0x7c00
     2                                      ; 约定: 
     3                                      ;   1. si用于打印字符串, 指向字符串开始位置
     4                                      ;   2. di备用
     5                                      Main:
     6                                          .SetupSegmentRegister:
     7                                              ; 初始化段寄存器
     8 00000000 31C0                                xor ax, ax
     9 00000002 8ED8                                mov ds, ax
    10 00000004 8EC0                                mov es, ax
    11 00000006 8ED0                                mov ss, ax
    12                                  
    13                                          .SetupStackPointer:
    14                                              ; 使用0x7c00前的一些空间作为栈
    15 00000008 BC007C                              mov sp, 0x7c00
    16                                  
    17                                          ; 打印开始字符串
    18 0000000B BE[6001]                        mov si, BootloaderStart
    19 0000000E E82901                          call PrintString
    20                                  
    21                                          ; 检查是否支持扩展int13, 使用BIOS中断的原因是BIOS对不同厂家的硬盘/固态已经做了屏蔽
    22                                          ; in/out读取的话需要查自己的硬盘/固态的厂家的端口说明
    23                                          .CheckInt13:
    24                                              ; int13是BIOS提供的读取磁盘的中断, 检测当前主板BIOS是否支持扩展的int13
    25 00000011 B441                                mov ah, 0x41 ; ah = 0x41, 检查是否支持int13扩展
    26 00000013 BBAA55                              mov bx, 0x55aa  ; MagicNumber
    27 00000016 B280                                mov dl, 0x80  ; 选择读取的硬盘, 0x80表示主盘, 即BootLoader在的盘
    28 00000018 CD13                                int 0x13
    29 0000001A 81FB55AA                            cmp bx, 0xaa55 ; 如果当前主板支持扩展int13, 则bx高低位会被调换
    30                                              ; 当前主板不支持扩展int13中断则报错
    31 0000001E 3EC606[A801]31                      mov byte ds:[ShitHappens + 0x06], '1'
    32 00000024 0F850B01                            jnz ErrorHappened
    33                                  
    34                                          ; 寻找MBR分区表中的活动分区
    35                                          .FindActivePartition:
    36                                              ; 程序被加载到 0x7c00 的位置, MBR分区0x01be偏移处开始分区表
    37                                              ; MBR分区表包含4个16字节的主分区入口, 循环读取, 看哪个分区是活动分区
    38 00000028 BFBE7D                              mov di, 0x7c00 + 0x01be
    39 0000002B B90400                              mov cx, 4
    40                                              .judgeNextActivePatition:
    41                                                  ; 启动扇区512字节已经被读取到内存了, 直接判断即可
    42 0000002E 8A1D                                    mov bl, [di]
    43 00000030 80FB80                                  cmp bl, 0x80
    44                                                  ; 找到活动分区, 读活动分区的FAT头
    45 00000033 740E                                    je .ReadFatHead
    46                                                  ; 没找到则判断下一个分区
    47 00000035 83C710                                  add di, 16
    48 00000038 E2F4                                    loop .judgeNextActivePatition
    49                                              
    50                                              ; 四个都不是活动分区, 修改错误信息, 终止
    51                                              .NoActivatePartition:
    52 0000003A 3EC606[A801]32                          mov byte ds:[ShitHappens + 0x06], '2'
    53 00000040 E9F000                                  jmp ErrorHappened
    54                                  
    55                                          ; FAT的物理结构:
    56                                          ;       |   FAT头   |   FAT表   | 根目录 |        FAT数据区        |
    57                                          ; 其中:
    58                                          ;       1. FAT头在的扇区/块称为保留扇区/块, 因为可以额外保留空间, 但一定小于512字节
    59                                          ;       2. FAT头前的区域称为隐藏扇区
    60                                  
    61                                          ; 读取FAT头到内存的7e00处, FAT头不大, 小于512字节, 所以读取512字节就保证一定能把FAT头读出来
    62                                          ; 计算数据区的首个块的LBA28地址只需要前90个字节的信息即可
    63                                          .ReadFatHead:
    64                                              ; 局部常量
    65                                              FatHeadMemAddr equ 0x7e00
    66                                  
    67                                              ; 打印BootLoader进程
    68 00000043 BE[6D01]                            mov si, PatitionFound
    69 00000046 E8F100                              call PrintString
    70                                              ; 读取活动FAT分区的起始块号的LBA28地址, MBR标准中在首地址+8处
    71                                              ; 四个字节32位, 直接用ebx
    72 00000049 668B5D08                            mov ebx, [di + 8]
    73 0000004D 66891E[5801]                        mov dword [BlockLow], ebx
    74                                              ; 保存目标内存起始地址
    75 00000052 C706[5401]007E                      mov word [BufferOffset], FatHeadMemAddr
    76                                              ; 明确物理块数
    77 00000058 C606[5201]01                        mov byte [BlockCount], 1
    78                                              ; 读取
    79 0000005D E8BA00                              call ReadDisk
    80                                          
    81                                          ; 接下来根据FAT头中的信息, 读取FAT数据区到内存中
    82                                          ; 所以要先准备FAT数据集的内容
    83                                          .PrepareReadFatData:
    84                                              FatDataMemAddr equ 0x8000
    85                                  
    86                                              ; 准备读取
    87 00000060 BF007E                              mov di, FatHeadMemAddr
    88                                              ; 读取保留扇区数
    89 00000063 6631DB                              xor ebx, ebx
    90 00000066 8B5D0E                              mov bx, [di + 0x0e] ; 1A0E
    91                                              ; 读取隐藏磁区数, 即FAT头所在的块前有多少个块, 2个字节, 位于0x0e偏移处
    92 00000069 668B451C                            mov eax, [di + 0x1c] ; 0080
    93                                              ; FAT分区表基址 = 保留区+隐藏区
    94 0000006D 6601C3                              add ebx, eax
    95                                  
    96                                              ; 读取每簇扇区数, 为后续读取文件做准备
    97 00000070 6631C0                              xor eax, eax
    98 00000073 8A450D                              mov al, byte [di + 0x0d]
    99 00000076 50                                  push ax
   100                                  
   101                                              ; 计算数据区起始地址
   102                                              ; 获得FAT分区表数量
   103 00000077 31C9                                xor cx, cx
   104 00000079 8A4D10                              mov cl, [di + 0x10] ; 0002
   105                                              ; 获取FAT分区表大小
   106 0000007C 668B4524                            mov eax, [di + 0x24] ; 000002F9
   107                                              .loopadd:
   108 00000080 6601C3                                  add ebx, eax
   109 00000083 E2FB                                    loop .loopadd
   110                                  
   111                                              ; 数据区起始LBA28地址 = 隐藏扇区块数 + 保留扇区块数 + FAT分区表大小 * FAT分区表数量
   112 00000085 66891E[5801]                        mov dword [BlockLow], ebx
   113 0000008A C706[5401]0080                      mov word [BufferOffset], FatDataMemAddr
   114                                  
   115                                              ; 读取8个块(1个簇?), 放到内存其实地址为0x8000的地方
   116 00000090 BF0080                              mov di, FatDataMemAddr
   117 00000093 C606[5201]08                        mov byte [BlockCount], 8
   118                                  
   119 00000098 E87F00                              call ReadDisk
   120                                              
   121 0000009B C606[A801]34                        mov byte [ShitHappens + 0x06], '4'
   122                                          ; 读取了根目录在的第一个块之后, 查找Initial.bin文件
   123                                          ; FAT32使用32个字节表示一个FAT记录(一个文件/目录), 所以从0x0000偏移开始, 每次读取32个字节
   124                                          .FindInitialBin:
   125 000000A0 66813D494E4954                      cmp dword [di], 'INIT'
   126 000000A7 7516                                jne .NextFile
   127 000000A9 66817D0449414C20                    cmp dword [di + 4], "IAL "
   128 000000B1 750C                                jne .NextFile
   129 000000B3 66817D0842494E20                    cmp dword [di + 8], "BIN "
   130 000000BB 7502                                jne .NextFile
   131 000000BD EB0B                                jmp .PrepareInitialBin
   132                                  
   133                                              .NextFile:
   134 000000BF 81FF0090                                cmp di, 0x9000
   135 000000C3 776E                                    ja ErrorHappened
   136 000000C5 83C720                                  add di, 32
   137 000000C8 EBD6                                    jmp .FindInitialBin
   138                                  
   139                                          ; 找到Initial.bin之后, 准备读取该文件
   140                                          .PrepareInitialBin:
   141 000000CA BE[8501]                            mov si, InitialFound
   142 000000CD E86A00                              call PrintString
   143                                  
   144                                              ; 读取文件长度, 在32位记录中的的最后四位
   145                                              ; 低16位在0x1c中, 高16位在0x1e中, 单位是字节, 对512取除数和余数计算得到文件占了几个扇区
   146 000000D0 8B451C                              mov ax, [di + 0x1c]
   147 000000D3 8B551E                              mov dx, [di + 0x1e]
   148                                              ; cx是16位的, 所以除法是32位除法, 被除数放在ds:ax中, 除完后数放在dx, 商放在ax中
   149 000000D6 B90002                              mov cx, 512
   150 000000D9 F7F1                                div cx
   151 000000DB 83FA00                              cmp dx, 0
   152 000000DE 7401                                je .NoExtraSector
   153                                              ; 余数不为0, 则需要多读一个扇区
   154 000000E0 40                                  inc ax
   155                                  
   156                                              .NoExtraSector:
   157 000000E1 A3[5201]                                mov [BlockCount], ax
   158                                                  ; FAT32中不是使用小的块, 而是使用由几个块组成的簇, 一般一个簇由8个块组成
   159                                                  ; 一个块一般为512字节, 所以一个簇一般为4096字节
   160                                                  ; 具体一个簇有几个块需要看FAT头的0x0D处一个字节的值, pop出来前面准备的即可
   161                                                  ; 此外, 一个簇用32位地址来标记, 高16位在0x14处, 低16位在0x1a处
   162                                                  ; 簇地址从数据区第0个块开始记, 从2开始, 所以前面得到数据区的起始地址之后, 之后
   163 000000E4 8B451A                                  mov ax, word [di + 0x1a]
   164                                                  ; 减2称以块数
   165 000000E7 83E802                                  sub ax, 2
   166 000000EA 59                                      pop cx
   167 000000EB F7E1                                    mul cx
   168                                                  ; 文件相对FAT数据区的偏移扇区数放在dx:ax中, 保存到ebx中去
   169 000000ED 66C1E210                                shl edx, 16
   170 000000F1 6625FFFF0000                            and eax, 0x0000ffff
   171 000000F7 6601C2                                  add edx, eax
   172                                  
   173                                                  ; 文件相对于磁盘头的偏移 = 文件相对FAT数据区的偏移扇区 + FAT数据区的偏移, 这个在读取FAT数据区开始的根目录时候依旧
   174                                                  ; FAT数据区的偏移 在读取FAT数据区开始的根目录时候已经放到BlockLow里去了
   175                                                  InitialBinMemAddr equ 0x9000
   176 000000FA 66A1[5801]                              mov eax, dword [BlockLow]
   177 000000FE 6601C2                                  add edx, eax
   178 00000101 668916[5801]                            mov dword [BlockLow], edx
   179 00000106 C706[5401]0090                          mov word [BufferOffset], InitialBinMemAddr
   180                                  
   181                                          ; 读取Initial.bin, 并且跳转过去运行
   182                                          .ReadInitialBin:
   183 0000010C BF0090                                  mov di, InitialBinMemAddr
   184 0000010F E80800                                  call ReadDisk
   185                                                  ; 打印字符串
   186 00000112 BE[9501]                                mov si, StartInitial
   187 00000115 E82200                                  call PrintString
   188 00000118 FFE7                                    jmp di
   189                                  
   190                                      ; 读取磁盘的函数, 读取磁盘前要填充DiskAddressPacket结构体, 数据放在结构体中的BufferSeg:BufferOffset处
   191                                      ReadDisk:
   192                                          ; 保存寄存器
   193 0000011A 50                              push ax
   194 0000011B 52                              push dx
   195 0000011C 56                              push si
   196                                  
   197                                          ; 调用扩展int13中断
   198 0000011D B442                            mov ah, 0x42
   199 0000011F B280                            mov dl, 0x80
   200 00000121 BE[5001]                        mov si, DiskAddressPacket
   201 00000124 CD13                            int 0x13
   202 00000126 84E4                            test ah, ah
   203 00000128 C606[A801]33                    mov byte [ShitHappens + 0x06], '3'
   204 0000012D 7504                            jnz ErrorHappened
   205                                  
   206                                          ; 恢复寄存器
   207 0000012F 5E                              pop si
   208 00000130 5A                              pop dx
   209 00000131 58                              pop ax
   210 00000132 C3                              ret
   211                                  
   212                                      ErrorHappened:
   213                                  
   214                                          ; 发生错误之后, 打印错误字符串, 然后停机
   215 00000133 BE[A201]                        mov si, ShitHappens
   216 00000136 E80100                          call PrintString
   217 00000139 F4                              hlt
   218                                  
   219                                      ; 同样, 主板BIOS对屏幕显示做了屏蔽, 利用主板BIOS中断来打印字符
   220                                      ; int10, ah=0x0e以打字机的方式打印字符, 所以直接传CR, LF即可
   221                                      PrintString:
   222                                          ; 保存寄存器
   223 0000013A 50                              push ax
   224 0000013B 51                              push cx
   225 0000013C B90002                          mov cx, 512
   226                                          .printchar:
   227 0000013F 8A04                                mov al, [si]
   228 00000141 B40E                                mov ah, 0x0e
   229 00000143 CD10                                int 0x10
   230                                              ; 字符串是否到结尾
   231 00000145 803C0A                              cmp byte [si], 0x0a
   232 00000148 7403                                je .return
   233                                              ; 打印下一个字符串
   234 0000014A 46                                  inc si
   235 0000014B E2F2                                loop .printchar
   236                                          .return:
   237 0000014D 59                                  pop cx
   238 0000014E 58                                  pop ax
   239 0000014F C3                                  ret
   240                                  
   241                                  DiskAddressPacket:
   242                                      ; DAP 是扩展int13, ah=0x42调用要求的参数, 类似于C函数传结构体
   243                                      ; 目前的标准是, 包大小为16字节, 第一个字节表示包大小, 第二个字节为保留字节, 第三四个字节表示读取多少个块
   244                                      ; 第五六个字节表示读到内存的段的偏移量, 第七八个字节表示读到哪个段
   245                                      ; LBA28, 用28个比特位, 4个字节(32位)表示块的地址, 所以最后四个字节表示读取的起始块的低地址, 后四个字节表示读取的起始块的高地址
   246 00000150 10                          PackSize        db 0x10
   247 00000151 00                          Reserved        db 0
   248 00000152 0000                        BlockCount      dw 0
   249 00000154 0000                        BufferOffset    dw 0
   250 00000156 0000                        BufferSegment   dw 0
   251 00000158 00000000                    BlockLow        dd 0
   252 0000015C 00000000                    BlockHigh       dd 0
   253                                  
   254                                  Prompts:
   255                                      CR equ 0x0d
   256                                      LF equ 0x0a
   257 00000160 537461727420426F6F-         BootloaderStart db "Start Boot!"
   257 00000169 7421               
   258 0000016B 0D0A                                        db CR, LF
   259 0000016D 464154333220506172-         PatitionFound   db "FAT32 Partition found!"
   259 00000176 746974696F6E20666F-
   259 0000017F 756E6421           
   260 00000183 0D0A                                        db CR, LF
   261 00000185 696E697469616C2066-         InitialFound    db "initial found!"
   261 0000018E 6F756E6421         
   262 00000193 0D0A                                        db CR, LF
   263 00000195 476F20696E69746961-         StartInitial    db "Go initial!"
   263 0000019E 6C21               
   264 000001A0 0D0A                                        db CR, LF
   265                                      ; ErrorCode     Meaning
   266                                      ; 1             不支持扩展的int13, 即无法用BIOS的int13, AL
   267                                      ; 2             找不到活动分区
   268                                      ; 3             读取硬盘错误
   269                                      ; 4             没有找到initial.bin
   270 000001A2 4572726F7220302C20-         ShitHappens     db "Error 0, Shit happened T_T"
   270 000001AB 536869742068617070-
   270 000001B4 656E656420545F54   
   271 000001BC 0D0A                                        db CR, LF
   272                                  
   273                                  ; 填充余空间
   274                                  times 446 - ($ - $$) db 0
